

React JS 
----
  creating react app
  ----
    1. React JS App based on JS 
    2. React JS App based on TS [RECOMMENDED]

  options in build system  
  ----  
    1. webpack - popular build system [CHOSEN]
    2. vite -- modern build system 


  React JS App based on TS using webpack
  -----
    npx create-react-app react-bosch-app --template typescript




#1: React JS App 
    1.1 Netflix Clone 
    1.2 CRUD App - Employee Management App 
        1.2.1 Add Employee
        1.2.2 List Employees 
        1.2.3 Employee Details
        1.2.4 Update Employee [TODO]
        1.2.5 Delete Employee [TODO]
    1.3 E-Commerce (Product Catalog + Add to Cart)  
    1.4 Todo App 
        1.4.1 Add Todo
        1.4.2 List Todos
        1.4.3 Mark Todo as Completed [TODO]
        1.4.4 Delete Todo [TODO]
    1.5 Authentication 
        1.5.1 Sign Up
        1.5.2 Log In 
        1.5.3 Sign Out [TODO]
          

#2: Redux-Toolkit App 


#3: NodeJS + ExpressJS + Mongodb REST API 


=====
  File walkthrough
  React App Architecture
  How react apps are running? 

Component in ReactJS 
=====
  Skeleton of a component
    * imports (optional)
    * component defn 
       must return JSX
    * export 

  Types of Components 
  -----
    1. Functional Components [RECOMMENDED]
      1.1 Functional Component with Named Function
      1.2 Functional Component with Anonymous Function
      1.3 Functional Component with Arrow Function

    2. Class Components [NEVER EVER WRITE IT - NOT RECOMMENDED]

  
Naming Conventions & Casing Conventions

Casing Types
  1. PascalCase 
      * Recommended for Interface in TypeScript 
      * Recommended for React Components and the folder of Components

      examples 
      ---
        class CarDetails {

        }

        interface Employee {

        }

  2. camelCase 
      * Recommended for variables, const, functions, methods in JS & TS 
      * Recommended for id's of html elements 
      * Recommended for variables, const, fn, methods, event handlers of React Component
      
      examples 
      -----
        var myCar = 'BMW';
        let isLoggedIn = true;

        function getCarInfo() {
          //....
        }

  3. kebab-case
      * Recommended for URLs 
      * Recommended for file names, folder names, assets in front end projects  
      * Recommended for css classes 

      examples 
      -----
        btn-primary
        slideshow-container 
        youtube-logo.png 

  4. snake_case 
    * never ever use this. 
    * okay for const in JS & TS if architect accepts

    examples
    ---
      const MAX_STUDENTS_PER_CLASS = 30;
      const maxStudentsPerClass = 30;


=======
Thinking in ReactJS
-----
  0. Identify the number of components 
  1. Breaking the UI into component hierarchy 
  2. 
  3. 


=====
  Choices in UI Library 
    1. Material UI 
    2. Bootstrap [Chosen]
    3. Ant Design
    4. Tailwind CSS 

======
